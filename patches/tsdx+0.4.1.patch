diff --git a/node_modules/tsdx/.DS_Store b/node_modules/tsdx/.DS_Store
new file mode 100644
index 0000000..c88a062
Binary files /dev/null and b/node_modules/tsdx/.DS_Store differ
diff --git a/node_modules/tsdx/dist/.progress-estimator/5e1a1bc72a1c85f144986cb7aa3d91e6fd42e1c4 b/node_modules/tsdx/dist/.progress-estimator/5e1a1bc72a1c85f144986cb7aa3d91e6fd42e1c4
index 3bcf40b..3bdea47 100644
--- a/node_modules/tsdx/dist/.progress-estimator/5e1a1bc72a1c85f144986cb7aa3d91e6fd42e1c4
+++ b/node_modules/tsdx/dist/.progress-estimator/5e1a1bc72a1c85f144986cb7aa3d91e6fd42e1c4
@@ -1,5 +1,12 @@
-1063
-1221
+11034
+5894
+5488
+9926
+3208
+8393
+19165
 1229
 1176
-1250
\ No newline at end of file
+10077
+1806
+1651
\ No newline at end of file
diff --git a/node_modules/tsdx/dist/.progress-estimator/9a3492e73be0eb3875889eb84075f018f90b4f72 b/node_modules/tsdx/dist/.progress-estimator/9a3492e73be0eb3875889eb84075f018f90b4f72
index c912aff..523f495 100644
--- a/node_modules/tsdx/dist/.progress-estimator/9a3492e73be0eb3875889eb84075f018f90b4f72
+++ b/node_modules/tsdx/dist/.progress-estimator/9a3492e73be0eb3875889eb84075f018f90b4f72
@@ -1,5 +1,12 @@
-1973
-2032
 2737
 2627
-3019
\ No newline at end of file
+3094
+3169
+3252
+3264
+5041
+3075
+3117
+2297
+2247
+2372
\ No newline at end of file
diff --git a/node_modules/tsdx/dist/createRollupConfig.js b/node_modules/tsdx/dist/createRollupConfig.js
index 65b8da6..39c355b 100644
--- a/node_modules/tsdx/dist/createRollupConfig.js
+++ b/node_modules/tsdx/dist/createRollupConfig.js
@@ -33,6 +33,7 @@ function createRollupConfig(format, env, opts) {
         output: {
             // Set filenames of the consumer's package
             file: `${constants_1.paths.appDist}/${utils_1.safeVariableName(opts.name)}.${format}.${env}.js`,
+            inlineDynamicImports: true,
             // Pass through the file format
             format,
             // Do not let Rollup call Object.freeze() on namespace import objects
@@ -74,10 +75,10 @@ function createRollupConfig(format, env, opts) {
                 ].filter(Boolean),
             }),
             format === 'umd' &&
-                rollup_plugin_commonjs_1.default({
-                    // use a regex to make sure to include eventual hoisted packages
-                    include: /\/node_modules\//,
-                }),
+            rollup_plugin_commonjs_1.default({
+                // use a regex to make sure to include eventual hoisted packages
+                include: /\/node_modules\//,
+            }),
             rollup_plugin_json_1.default(),
             rollup_plugin_typescript2_1.default({
                 typescript: require('typescript'),
@@ -104,17 +105,18 @@ function createRollupConfig(format, env, opts) {
                 printInfo: false,
             }),
             env === 'production' &&
-                rollup_plugin_terser_1.terser({
-                    sourcemap: true,
-                    output: { comments: false },
-                    compress: {
-                        keep_infinity: true,
-                        pure_getters: true,
-                    },
-                    ecma: 5,
-                    toplevel: format === 'es' || format === 'cjs',
-                    warnings: true,
-                }),
+            rollup_plugin_terser_1.terser({
+                sourcemap: true,
+                output: { comments: false },
+                // compress: {
+                //     keep_infinity: true,
+                //     pure_getters: true,
+                // },
+                compress: false,
+                ecma: 5,
+                toplevel: format === 'es' || format === 'cjs',
+                warnings: true,
+            }),
             rollup_plugin_preserve_shebang_1.default({
                 shebang,
             }),
diff --git a/node_modules/tsdx/dist/createRollupConfigDir.js b/node_modules/tsdx/dist/createRollupConfigDir.js
new file mode 100644
index 0000000..f16e653
--- /dev/null
+++ b/node_modules/tsdx/dist/createRollupConfigDir.js
@@ -0,0 +1,125 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const tslib_1 = require("tslib");
+const utils_1 = require("tsdx/dist/utils");
+const constants_1 = require("tsdx/dist/constants");
+const rollup_plugin_size_snapshot_1 = require("rollup-plugin-size-snapshot");
+const rollup_plugin_terser_1 = require("rollup-plugin-terser");
+const rollup_plugin_babel_1 = tslib_1.__importDefault(require("rollup-plugin-babel"));
+const rollup_plugin_commonjs_1 = tslib_1.__importDefault(require("rollup-plugin-commonjs"));
+const rollup_plugin_json_1 = tslib_1.__importDefault(require("rollup-plugin-json"));
+const rollup_plugin_replace_1 = tslib_1.__importDefault(require("rollup-plugin-replace"));
+const rollup_plugin_node_resolve_1 = tslib_1.__importDefault(require("rollup-plugin-node-resolve"));
+const rollup_plugin_sourcemaps_1 = tslib_1.__importDefault(require("rollup-plugin-sourcemaps"));
+const rollup_plugin_typescript2_1 = tslib_1.__importDefault(require("rollup-plugin-typescript2"));
+const rollup_plugin_preserve_shebang_1 = tslib_1.__importDefault(require("@jaredpalmer/rollup-plugin-preserve-shebang"));
+const replacements = [{ original: 'lodash', replacement: 'lodash-es' }];
+const babelOptions = {
+    exclude: /node_modules/,
+    plugins: [
+        'annotate-pure-calls',
+        'dev-expression',
+        ['transform-rename-import', { replacements }],
+    ],
+};
+function createRollupConfig(format, env, opts) {
+    let shebang;
+    return {
+        // Tell Rollup the entry point to the package
+        input: opts.input,
+        // Tell Rollup which packages to ignore
+        external: utils_1.external,
+        // Establish Rollup output
+        output: {
+            // Set filenames of the consumer's package
+            dir: `${constants_1.paths.appDist}/${utils_1.safeVariableName(opts.name)}.${format}.${env}`,
+            // Pass through the file format
+            format,
+            // Do not let Rollup call Object.freeze() on namespace import objects
+            // (i.e. import * as namespaceImportObject from...) that are accessed dynamically.
+            freeze: false,
+            // Do not let Rollup add a `__esModule: true` property when generating exports for non-ESM formats.
+            esModule: false,
+            // Rollup has treeshaking by default, but we can optimize it further...
+            treeshake: {
+                // We assume reading a property of an object never has side-effects.
+                // This means tsdx WILL remove getters and setters on objects.
+                //
+                // @example
+                //
+                // const foo = {
+                //  get bar() {
+                //    console.log('effect');
+                //    return 'bar';
+                //  }
+                // }
+                //
+                // const result = foo.bar;
+                // const illegalAccess = foo.quux.tooDeep;
+                //
+                // Punchline....Don't use getters and setters
+                propertyReadSideEffects: false,
+            },
+            name: opts.name || utils_1.safeVariableName(opts.name),
+            sourcemap: true,
+            globals: { react: 'React', 'react-native': 'ReactNative' },
+            exports: 'named',
+        },
+        plugins: [
+            rollup_plugin_node_resolve_1.default({
+                mainFields: [
+                    'module',
+                    'main',
+                    opts.target !== 'node' ? 'browser' : undefined,
+                ].filter(Boolean),
+            }),
+            format === 'umd' &&
+            rollup_plugin_commonjs_1.default({
+                // use a regex to make sure to include eventual hoisted packages
+                include: /\/node_modules\//,
+            }),
+            rollup_plugin_json_1.default(),
+            rollup_plugin_typescript2_1.default({
+                typescript: require('typescript'),
+                cacheRoot: `./.rts2_cache_${format}`,
+                tsconfigDefaults: {
+                    compilerOptions: {
+                        sourceMap: true,
+                        declaration: true,
+                        jsx: 'react',
+                    },
+                },
+                tsconfigOverride: {
+                    compilerOptions: {
+                        target: 'esnext',
+                    },
+                },
+            }),
+            rollup_plugin_babel_1.default(babelOptions),
+            rollup_plugin_replace_1.default({
+                'process.env.NODE_ENV': JSON.stringify(env),
+            }),
+            rollup_plugin_sourcemaps_1.default(),
+            // rollup_plugin_size_snapshot_1.sizeSnapshot({
+            //     printInfo: false,
+            // }),
+            env === 'production' &&
+            rollup_plugin_terser_1.terser({
+                sourcemap: true,
+                output: { comments: false },
+                // compress: {
+                //     keep_infinity: true,
+                //     pure_getters: true,
+                // },
+                compress: false,
+                ecma: 5,
+                toplevel: format === 'es' || format === 'cjs',
+                warnings: true,
+            }),
+            rollup_plugin_preserve_shebang_1.default({
+                shebang,
+            }),
+        ],
+    };
+}
+exports.createRollupConfig = createRollupConfig;
diff --git a/node_modules/tsdx/dist/index.js b/node_modules/tsdx/dist/index.js
index 7921bef..9ffc2cf 100755
--- a/node_modules/tsdx/dist/index.js
+++ b/node_modules/tsdx/dist/index.js
@@ -17,6 +17,7 @@ const ora_1 = tslib_1.__importDefault(require("ora"));
 const constants_1 = require("./constants");
 const Messages = tslib_1.__importStar(require("./messages"));
 const createRollupConfig_1 = require("./createRollupConfig");
+const createRollupConfig_2 = require("./createRollupConfigDir");
 const createJestConfig_1 = require("./createJestConfig");
 const utils_1 = require("./utils");
 const jpjs_1 = require("jpjs");
@@ -53,8 +54,8 @@ async function getInputs(entries, source) {
     let stub = [];
     stub
         .concat(entries && entries.length
-        ? entries
-        : (source && utils_1.resolveApp(source)) ||
+            ? entries
+            : (source && utils_1.resolveApp(source)) ||
             ((await exports.isDir(utils_1.resolveApp('src'))) && (await jsOrTs('src/index'))))
         .map(file => sync_1.default(file))
         .forEach(input => inputs.push(input));
@@ -63,15 +64,15 @@ async function getInputs(entries, source) {
 function createBuildConfigs(opts) {
     return jpjs_1.concatAllArray(opts.input.map(input => [
         opts.format.includes('cjs') &&
-            createRollupConfig_1.createRollupConfig('cjs', 'development', Object.assign({}, opts, { input })),
+        createRollupConfig_2.createRollupConfig('cjs', 'development', Object.assign({}, opts, { input })),
         opts.format.includes('cjs') &&
-            createRollupConfig_1.createRollupConfig('cjs', 'production', Object.assign({}, opts, { input })),
+        createRollupConfig_2.createRollupConfig('cjs', 'production', Object.assign({}, opts, { input })),
         opts.format.includes('es') &&
-            createRollupConfig_1.createRollupConfig('es', 'production', Object.assign({}, opts, { input })),
-        opts.format.includes('umd') &&
-            createRollupConfig_1.createRollupConfig('umd', 'development', Object.assign({}, opts, { input })),
-        opts.format.includes('umd') &&
-            createRollupConfig_1.createRollupConfig('umd', 'production', Object.assign({}, opts, { input })),
+        createRollupConfig_2.createRollupConfig('es', 'production', Object.assign({}, opts, { input })),
+        // opts.format.includes('umd') &&
+        // createRollupConfig_1.createRollupConfig('umd', 'development', Object.assign({}, opts, { input })),
+        // opts.format.includes('umd') &&
+        // createRollupConfig_1.createRollupConfig('umd', 'production', Object.assign({}, opts, { input })),
     ]));
 }
 async function moveTypes() {
@@ -89,55 +90,55 @@ prog
     .command('create <pkg>')
     .describe('Create a new package with TSDX')
     .action(async (pkg) => {
-    const bootSpinner = ora_1.default(`Creating ${chalk_1.default.bold.green(pkg)}...`).start();
-    try {
-        const projectPath = fs_extra_1.default.realpathSync(process.cwd()) + '/' + pkg;
-        // copy the template
-        await fs_extra_1.default.copy(path_1.default.resolve(__dirname, '../template'), projectPath, {
-            overwrite: true,
-        });
-        // fix gitignore
-        await fs_extra_1.default.move(path_1.default.resolve(projectPath, './gitignore'), path_1.default.resolve(projectPath, './.gitignore'));
-        // Install deps
-        process.chdir(projectPath);
-        const safeName = utils_1.safePackageName(pkg);
-        const pkgJson = {
-            name: safeName,
-            version: '0.1.0',
-            main: 'dist/index.js',
-            'umd:main': `dist/${safeName}.umd.production.js`,
-            module: `dist/${safeName}.es.production.js`,
-            typings: 'dist/index.d.ts',
-            files: ['dist'],
-            scripts: {
-                start: 'tsdx watch',
-                build: 'tsdx build',
-                prepare: 'npm run build',
-                test: 'tsdx test',
-            },
-        };
-        await fs_extra_1.default.outputJSON(path_1.default.resolve(projectPath, 'package.json'), pkgJson);
-        bootSpinner.succeed(`Created ${chalk_1.default.bold.green(pkg)}`);
-        Messages.start(pkg);
-    }
-    catch (error) {
-        bootSpinner.fail(`Failed to create ${chalk_1.default.bold.red(pkg)}`);
-        logError_1.default(error);
-        process.exit(1);
-    }
-    const deps = ['@types/jest', 'tsdx', 'typescript'];
-    const installSpinner = ora_1.default(Messages.installing(deps)).start();
-    try {
-        await execa_1.default(`yarn`, ['add', ...deps, '--dev']);
-        installSpinner.succeed('Installed dependecines');
-        console.log(Messages.start(pkg));
-    }
-    catch (error) {
-        installSpinner.fail('Failed to install dependencies');
-        logError_1.default(error);
-        process.exit(1);
-    }
-});
+        const bootSpinner = ora_1.default(`Creating ${chalk_1.default.bold.green(pkg)}...`).start();
+        try {
+            const projectPath = fs_extra_1.default.realpathSync(process.cwd()) + '/' + pkg;
+            // copy the template
+            await fs_extra_1.default.copy(path_1.default.resolve(__dirname, '../template'), projectPath, {
+                overwrite: true,
+            });
+            // fix gitignore
+            await fs_extra_1.default.move(path_1.default.resolve(projectPath, './gitignore'), path_1.default.resolve(projectPath, './.gitignore'));
+            // Install deps
+            process.chdir(projectPath);
+            const safeName = utils_1.safePackageName(pkg);
+            const pkgJson = {
+                name: safeName,
+                version: '0.1.0',
+                main: 'dist/index.js',
+                'umd:main': `dist/${safeName}.umd.production.js`,
+                module: `dist/${safeName}.es.production.js`,
+                typings: 'dist/index.d.ts',
+                files: ['dist'],
+                scripts: {
+                    start: 'tsdx watch',
+                    build: 'tsdx build',
+                    prepare: 'npm run build',
+                    test: 'tsdx test',
+                },
+            };
+            await fs_extra_1.default.outputJSON(path_1.default.resolve(projectPath, 'package.json'), pkgJson);
+            bootSpinner.succeed(`Created ${chalk_1.default.bold.green(pkg)}`);
+            Messages.start(pkg);
+        }
+        catch (error) {
+            bootSpinner.fail(`Failed to create ${chalk_1.default.bold.red(pkg)}`);
+            logError_1.default(error);
+            process.exit(1);
+        }
+        const deps = ['@types/jest', 'tsdx', 'typescript'];
+        const installSpinner = ora_1.default(Messages.installing(deps)).start();
+        try {
+            await execa_1.default(`yarn`, ['add', ...deps, '--dev']);
+            installSpinner.succeed('Installed dependecines');
+            console.log(Messages.start(pkg));
+        }
+        catch (error) {
+            installSpinner.fail('Failed to install dependencies');
+            logError_1.default(error);
+            process.exit(1);
+        }
+    });
 prog
     .command('watch')
     .describe('Rebuilds on any change')
@@ -150,54 +151,56 @@ prog
     .option('--format', 'Specify module format(s)', 'cjs,es,umd')
     .example('watch --format cjs,es')
     .action(async (opts) => {
-    opts.name = opts.name || appPackageJson.name;
-    opts.input = await getInputs(opts.entry, appPackageJson.source);
-    const [cjsDev, cjsProd, ...otherConfigs] = createBuildConfigs(opts);
-    if (opts.format.includes('cjs')) {
-        try {
-            await fs_extra_1.default.writeFile(utils_1.resolveApp('dist/index.js'), `
+        opts.name = opts.name || appPackageJson.name;
+        opts.input = await getInputs(opts.entry, appPackageJson.source);
+        const [cjsDev, cjsProd, ...otherConfigs] = createBuildConfigs(opts);
+        if (opts.format.includes('cjs')) {
+            try {
+                await fs_extra_1.default.writeFile(utils_1.resolveApp('dist/index.js'), `
          'use strict'
 
       if (process.env.NODE_ENV === 'production') {
-        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.production.js')
+        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.production')
       } else {
-        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.development.js')
+        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.development')
       }`, {
-                overwrite: true,
-            });
-        }
-        catch (e) { }
-    }
-    const spinner = ora_1.default().start();
-    await rollup_1.watch([cjsDev, cjsProd, ...otherConfigs].map(inputOptions => (Object.assign({ watch: {
-            silent: true,
-            include: 'src/**',
-            exclude: 'node_modules/**',
-        } }, inputOptions)))).on('event', async (event) => {
-        if (event.code === 'START') {
-            utils_1.clearConsole();
-            spinner.start(chalk_1.default.bold.cyan('Compiling modules...'));
-        }
-        if (event.code === 'ERROR') {
-            spinner.fail(chalk_1.default.bold.red('Failed to compile'));
-            logError_1.default(event.error);
-        }
-        if (event.code === 'FATAL') {
-            spinner.fail(chalk_1.default.bold.red('Failed to compile'));
-            logError_1.default(event.error);
+                        overwrite: true,
+                    });
+            }
+            catch (e) { }
         }
-        if (event.code === 'END') {
-            spinner.succeed(chalk_1.default.bold.green('Compiled successfully'));
-            console.log(`
+        const spinner = ora_1.default().start();
+        await rollup_1.watch([cjsDev, cjsProd, ...otherConfigs].map(inputOptions => (Object.assign({
+            watch: {
+                silent: true,
+                include: 'src/**',
+                exclude: 'node_modules/**',
+            }
+        }, inputOptions)))).on('event', async (event) => {
+            if (event.code === 'START') {
+                utils_1.clearConsole();
+                spinner.start(chalk_1.default.bold.cyan('Compiling modules...'));
+            }
+            if (event.code === 'ERROR') {
+                spinner.fail(chalk_1.default.bold.red('Failed to compile'));
+                logError_1.default(event.error);
+            }
+            if (event.code === 'FATAL') {
+                spinner.fail(chalk_1.default.bold.red('Failed to compile'));
+                logError_1.default(event.error);
+            }
+            if (event.code === 'END') {
+                spinner.succeed(chalk_1.default.bold.green('Compiled successfully'));
+                console.log(`
   ${chalk_1.default.dim('Watching for changes')}
 `);
-            try {
-                await moveTypes();
+                try {
+                    await moveTypes();
+                }
+                catch (_error) { }
             }
-            catch (_error) { }
-        }
+        });
     });
-});
 prog
     .command('build')
     .describe('Build your project once and exit')
@@ -210,63 +213,63 @@ prog
     .option('--format', 'Specify module format(s)', 'cjs,es,umd')
     .example('build --format cjs,es')
     .action(async (opts) => {
-    opts.name = opts.name || appPackageJson.name;
-    opts.input = await getInputs(opts.entry, appPackageJson.source);
-    const [cjsDev, cjsProd, ...otherConfigs] = createBuildConfigs(opts);
-    if (opts.format.includes('cjs')) {
-        try {
-            const promise = fs_extra_1.default.writeFile(utils_1.resolveApp('dist/index.js'), `
+        opts.name = opts.name || appPackageJson.name;
+        opts.input = await getInputs(opts.entry, appPackageJson.source);
+        const [cjsDev, cjsProd, ...otherConfigs] = createBuildConfigs(opts);
+        if (opts.format.includes('cjs')) {
+            try {
+                const promise = fs_extra_1.default.writeFile(utils_1.resolveApp('dist/index.js'), `
          'use strict'
 
       if (process.env.NODE_ENV === 'production') {
-        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.production.js')
+        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.production')
       } else {
-        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.development.js')
+        module.exports = require('./${utils_1.safeVariableName(opts.name)}.cjs.development')
       }`, {
-                overwrite: true,
+                        overwrite: true,
+                    });
+                logger(promise, 'Creating entry file');
+            }
+            catch (e) { }
+        }
+        try {
+            const promise = asyncro_1.default.map([cjsDev, cjsProd, ...otherConfigs], async (inputOptions) => {
+                let bundle = await rollup_1.rollup(inputOptions);
+                await bundle.write(inputOptions.output);
             });
-            logger(promise, 'Creating entry file');
+            logger(promise, 'Building modules');
+            await moveTypes();
         }
-        catch (e) { }
-    }
-    try {
-        const promise = asyncro_1.default.map([cjsDev, cjsProd, ...otherConfigs], async (inputOptions) => {
-            let bundle = await rollup_1.rollup(inputOptions);
-            await bundle.write(inputOptions.output);
-        });
-        logger(promise, 'Building modules');
-        await moveTypes();
-    }
-    catch (error) {
-        logError_1.default(error);
-    }
-});
+        catch (error) {
+            logError_1.default(error);
+        }
+    });
 prog
     .command('test')
     .describe('Run jest test runner in watch mode. Passes through all flags directly to Jest')
     .action(async (opts) => {
-    // Do this as the first thing so that any code reading it knows the right env.
-    process.env.BABEL_ENV = 'test';
-    process.env.NODE_ENV = 'test';
-    // Makes the script crash on unhandled rejections instead of silently
-    // ignoring them. In the future, promise rejections that are not handled will
-    // terminate the Node.js process with a non-zero exit code.
-    process.on('unhandledRejection', err => {
-        throw err;
+        // Do this as the first thing so that any code reading it knows the right env.
+        process.env.BABEL_ENV = 'test';
+        process.env.NODE_ENV = 'test';
+        // Makes the script crash on unhandled rejections instead of silently
+        // ignoring them. In the future, promise rejections that are not handled will
+        // terminate the Node.js process with a non-zero exit code.
+        process.on('unhandledRejection', err => {
+            throw err;
+        });
+        const argv = process.argv.slice(2);
+        // Watch unless on CI or in coverage mode
+        if (!process.env.CI && argv.indexOf('--coverage') < 0) {
+            // Use Jest --watchAll flag (instead of) --watch as of Jest 23+
+            // @see https://github.com/wmonk/create-react-app-typescript/issues/282#issuecomment-379660648
+            argv.push('--watchAll');
+        }
+        const maybeTestSetupFiledExists = await fs_extra_1.default.exists(constants_1.paths.testsSetup);
+        const setupTestsFile = maybeTestSetupFiledExists
+            ? '<rootDir>/src/setupTests.ts'
+            : undefined;
+        argv.push('--config', JSON.stringify(Object.assign({}, createJestConfig_1.createJestConfig(relativePath => path_1.default.resolve(__dirname, '..', relativePath), constants_1.paths.appRoot), appPackageJson.jest)));
+        const [_skipTheWordTest, ...argsToPassToJestCli] = argv;
+        jest_1.default.run(argsToPassToJestCli);
     });
-    const argv = process.argv.slice(2);
-    // Watch unless on CI or in coverage mode
-    if (!process.env.CI && argv.indexOf('--coverage') < 0) {
-        // Use Jest --watchAll flag (instead of) --watch as of Jest 23+
-        // @see https://github.com/wmonk/create-react-app-typescript/issues/282#issuecomment-379660648
-        argv.push('--watchAll');
-    }
-    const maybeTestSetupFiledExists = await fs_extra_1.default.exists(constants_1.paths.testsSetup);
-    const setupTestsFile = maybeTestSetupFiledExists
-        ? '<rootDir>/src/setupTests.ts'
-        : undefined;
-    argv.push('--config', JSON.stringify(Object.assign({}, createJestConfig_1.createJestConfig(relativePath => path_1.default.resolve(__dirname, '..', relativePath), constants_1.paths.appRoot), appPackageJson.jest)));
-    const [_skipTheWordTest, ...argsToPassToJestCli] = argv;
-    jest_1.default.run(argsToPassToJestCli);
-});
 prog.parse(process.argv);
